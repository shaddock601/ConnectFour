#include <iostream>
#include <stdlib.h>
#include <time.h>
using namespace std;
void init(int grid[6][7]){
	for (int i = 0; i < 6; i++)
	{
		for (int j = 0; j < 7; j++)
		{
			grid[i][j] = 0;
		}
	}
}

void display(int grid[6][7])
{
	for (int i = 0; i < 6; i++)
	{
		for (int j = 0; j < 7; j++)
		{
			if (grid[i][j] == 0)
			{
				cout << " ";
			}
			else if (grid[i][j] == 1)
			{
				cout << "X";
			}
			else
			{
				cout << "O";
			}
			if (j < 6)
			{
				cout << " | ";
			}
		}
		cout << endl;
		if (i < 6)
		{
			cout << "--+---+---+---+---+---+--" << endl;
		}
	}
}

void turn(int grid[6][7], int player)
{
	int pick;
	srand(time(NULL));
	if (player == 1)
	{
		cout << " Player : Please pick a square (1-7) " << endl;
		cin >> pick;
		cout << endl;
	}
	else if (player == 2)
	{
		for (int j = 0; j < 7; j++)
		{
			if (grid[5][3] == 0)
			{
				pick = 4;
			}
			if (grid[5][j] == 1)
			{
				pick = j + 1;
			}

		}

		////////////////////////////////////////////////แนวทแยง///////////////////////////////////////////////////////////
		for (int i = 5; i >= 0; i--)
		{
			for (int j = 0; j < 7; j++)
			{
				if (grid[i][j] == 1 && grid[i - 1][j + 1] == 1 && grid[i - 2][j + 2] == 1 && grid[i - 3][j + 2] != 0)
				{
					pick = j + 4;
				}

				if (grid[i][j] == 1 && grid[i - 1][j + 1] == 1 && grid[i - 3][j + 3] == 1 && grid[i - 2][j + 2] != 0)
				{
					pick = j + 2;
				}

				if (grid[i][j] == 1 && grid[i - 2][j + 2] == 1 && grid[i - 3][j + 3] == 1 && grid[i - 1][j + 1] != 0)
				{
					pick = j + 1;
				}

				if (grid[i][j] == 1 && grid[i - 2][j + 2] == 1 && grid[i - 1][j + 1] != 0)
				{
					pick = j + 1;
				}
			}
		}

		/*if (grid[5][0] == 1 && grid[4][1] == 1 && grid[3][2] == 1 && grid[3][3] != 0)
		{
		pick = 4;
		}

		if (grid[5][1] == 1 && grid[4][2] == 1 && grid[3][3] == 1 && grid[3][4] != 0)
		{
		pick = 5;
		}

		if (grid[5][2] == 1 && grid[4][3] == 1 && grid[3][4] == 1 && grid[3][5] != 0)
		{
		pick = 6;
		}

		if (grid[5][3] == 1 && grid[4][4] == 1 && grid[3][5] == 1 && grid[3][6] != 0)
		{
		pick = 7;
		}

		/////////////////////////////////////////////////////////////////////////////////////////////////////////

		if (grid[4][0] == 1 && grid[3][1] == 1 && grid[2][2] == 1 && grid[2][3] != 0)
		{
		pick = 4;
		}

		if (grid[4][1] == 1 && grid[3][2] == 1 && grid[2][3] == 1 && grid[2][4] != 0)
		{
		pick = 5;
		}

		if (grid[4][2] == 1 && grid[3][3] == 1 && grid[2][4] == 1 && grid[2][5] != 0)
		{
		pick = 6;
		}

		if (grid[4][3] == 1 && grid[3][4] == 1 && grid[2][5] == 1 && grid[2][6] != 0)
		{
		pick = 7;
		}

		/////////////////////////////////////////////////////////////////////////////////////////////////////////

		if (grid[3][0] == 1 && grid[2][1] == 1 && grid[1][2] == 1 && grid[1][3] != 0)
		{
		pick = 4;
		}

		if (grid[3][1] == 1 && grid[2][2] == 1 && grid[1][3] == 1 && grid[1][4] != 0)
		{
		pick = 5;
		}

		if (grid[3][2] == 1 && grid[2][3] == 1 && grid[1][4] == 1 && grid[1][5] != 0)
		{
		pick = 6;
		}

		if (grid[3][3] == 1 && grid[2][4] == 1 && grid[1][5] == 1 && grid[1][6] != 0)
		{
		pick = 7;
		}

		/////////////////////////////////////////////////////////////////////////////////////////////////////////

		if (grid[2][0] == 1 && grid[1][1] == 1 && grid[0][2] == 1 && grid[0][3] != 0)
		{
		pick = 4;
		}

		if (grid[2][1] == 1 && grid[1][2] == 1 && grid[0][3] == 1 && grid[0][4] != 0)
		{
		pick = 5;
		}

		if (grid[2][2] == 1 && grid[1][3] == 1 && grid[0][4] == 1 && grid[0][5] != 0)
		{
		pick = 6;
		}

		if (grid[2][3] == 1 && grid[1][4] == 1 && grid[0][5] == 1 && grid[0][6] != 0)
		{
		pick = 7;
		}*/

		/////////////////////////////////////////////////////////////////////////////////////////////////////////

		for (int i = 0; i < 6; i++)
		{
			for (int j = 0; j < 7; j++)
			{
				if (grid[i][j] == 1 && grid[i + 1][j + 1] == 1 && grid[i + 2][j + 2] == 1)
				{
					pick = j + 3;
				}

				if (grid[i][j] == 1 && grid[i + 1][j + 1] == 1 && grid[i + 3][j + 3] == 1 && grid[i + 2][j + 2] != 0)
				{
					pick = j + 2;
				}

				if (grid[i][j] == 1 && grid[i + 2][j + 2] == 1 && grid[i + 3][j + 3] == 1 && grid[i + 1][j + 1] != 0)
				{
					pick = j + 1;
				}
			}
		}

		//แนวนอน
		for (int i = 5; i >= 0; i--)
		{
			if (grid[i][1] == 1 && grid[i][2] == 1)
			{
				pick = 1;
			}

			if (grid[i][2] == 1 && grid[i][3] == 1)
			{
				pick = 2;
			}

			if (grid[i][3] == 1 && grid[i][4] == 1)
			{
				pick = 3;
			}

			if (grid[i][4] == 1 && grid[i][5] == 1)
			{
				pick = 4;
			}

			if (grid[i][5] == 1 && grid[i][6] == 1)
			{
				pick = 5;
			}

			/////////////////////////////////////////////////////////////////////////////////////////////////////////

			if (grid[5][0] == 1 && grid[5][1] == 1 && grid[5][2] == 1)
			{
				pick = 4;
			}

			if (grid[5][1] == 1 && grid[5][2] == 1 && grid[5][3] == 1)
			{
				pick = 5;
			}

			if (grid[5][2] == 1 && grid[5][3] == 1 && grid[5][4] == 1)
			{
				pick = 6;
			}

			if (grid[5][3] == 1 && grid[5][4] == 1 && grid[5][5] == 1)
			{
				pick = 7;
			}

			/////////////////////////////////////////////////////////////////////////////////////////////////////////

			if (grid[i][0] == 1 && grid[i][1] == 1 && grid[i][2] == 1 && grid[i - 1][4] != 0)
			{
				if (grid[i - 1][4] != 0)
				{
					pick = 4;
				}

				else
				{
					pick = 3;
				}
			}

			if (grid[i][1] == 1 && grid[i][2] == 1 && grid[i][3] == 1 )
			{
				if (grid[i - 1][4] != 0)
				{
					pick = 5;
				}
				
				else
				{
					pick = 4;
				}
			}

			if (grid[i][2] == 1 && grid[i][3] == 1 && grid[i][4] == 1 )
			{
				if (grid[i - 1][4] != 0)
				{
					pick = 6;
				}
				else
				{
					pick = 5;
				}
			}

			if (grid[i][3] == 1 && grid[i][4] == 1 && grid[i][5] == 1 )
			{
				if (grid[i - 1][4] != 0)
				{
					pick = 7;
				}
				else
				{
					pick = 6;
				}
			}

			/////////////////////////////////////////////////////////////////////////////////////////////////////////

			if (grid[i][0] == 1 && grid[i][1] == 1 && grid[i][3] == 1)
			{
				pick = 3;
			}

			if (grid[i][1] == 1 && grid[i][2] == 1 && grid[i][4] == 1)
			{
				pick = 4;
			}

			if (grid[i][2] == 1 && grid[i][3] == 1 && grid[i][5] == 1)
			{
				pick = 5;
			}

			if (grid[i][3] == 1 && grid[i][4] == 1 && grid[i][6] == 1)
			{
				pick = 6;
			}

			if (grid[i][4] == 1 && grid[i][5] == 1 && grid[i][7] == 1)
			{
				pick = 7;
			}
		}

		//แนวตั้ง
		if (grid[5][0] == 1 && grid[4][0] == 1 && grid[3][0] == 1 || grid[4][0] == 1 && grid[3][0] == 1 && grid[2][0] == 1 ||
			grid[3][0] == 1 && grid[2][0] == 1 && grid[1][0] == 1 || grid[2][0] == 1 && grid[1][0] == 1 && grid[0][0] == 1)
		{
			pick = 1;
		}

		if (grid[5][1] == 1 && grid[4][1] == 1 && grid[3][1] == 1 || grid[4][1] == 1 && grid[3][1] == 1 && grid[2][1] == 1 ||
			grid[3][1] == 1 && grid[2][1] == 1 && grid[1][1] == 1 || grid[2][1] == 1 && grid[1][1] == 1 && grid[0][1] == 1)
		{
			pick = 2;
		}

		if (grid[5][2] == 1 && grid[4][2] == 1 && grid[3][2] == 1 || grid[4][2] == 1 && grid[3][2] == 1 && grid[2][2] == 1 ||
			grid[3][2] == 1 && grid[2][2] == 1 && grid[1][2] == 1 || grid[2][2] == 1 && grid[1][2] == 1 && grid[0][2] == 1)
		{
			pick = 3;
		}

		if (grid[5][3] == 1 && grid[4][3] == 1 && grid[3][3] == 1 || grid[4][3] == 1 && grid[3][3] == 1 && grid[2][3] == 1 ||
			grid[3][3] == 1 && grid[2][3] == 1 && grid[1][3] == 1 || grid[2][3] == 1 && grid[1][3] == 1 && grid[0][3] == 1)
		{
			pick = 4;
		}

		if (grid[5][4] == 1 && grid[4][4] == 1 && grid[3][4] == 1 || grid[4][4] == 1 && grid[3][4] == 1 && grid[2][4] == 1 ||
			grid[3][4] == 1 && grid[2][4] == 1 && grid[1][4] == 1 || grid[2][4] == 1 && grid[1][4] == 1 && grid[0][4] == 1)
		{
			pick = 5;
		}

		if (grid[5][5] == 1 && grid[4][5] == 1 && grid[3][5] == 1 || grid[4][5] == 1 && grid[3][5] == 1 && grid[2][5] == 1 ||
			grid[3][5] == 1 && grid[2][5] == 1 && grid[1][5] == 1 || grid[2][5] == 1 && grid[1][5] == 1 && grid[0][5] == 1)
		{
			pick = 6;
		}

		if (grid[5][6] == 1 && grid[4][6] == 1 && grid[3][6] == 1 || grid[4][6] == 1 && grid[3][6] == 1 && grid[2][6] == 1 ||
			grid[3][6] == 1 && grid[2][6] == 1 && grid[1][6] == 1 || grid[2][6] == 1 && grid[1][6] == 1 && grid[0][6] == 1)
		{
			pick = 7;
		}

		/////////////////////////////////////////////////////////////////////////////////////////////////////////

		if (grid[5][0] == 2 && grid[4][0] == 2 && grid[3][0] == 2 || grid[4][0] == 2 && grid[3][0] == 2 && grid[2][0] == 2 ||
			grid[3][0] == 2 && grid[2][0] == 2 && grid[1][0] == 2 || grid[2][0] == 2 && grid[1][0] == 2 && grid[0][0] == 2)
		{
			pick = 1;
		}

		if (grid[5][1] == 2 && grid[4][1] == 2 && grid[3][1] == 2 || grid[4][1] == 2 && grid[3][1] == 2 && grid[2][1] == 2 ||
			grid[3][1] == 2 && grid[2][1] == 2 && grid[1][1] == 2 || grid[2][1] == 2 && grid[1][1] == 2 && grid[0][1] == 2)
		{
			pick = 2;
		}

		if (grid[5][2] == 2 && grid[4][2] == 2 && grid[3][2] == 2 || grid[4][2] == 2 && grid[3][2] == 2 && grid[2][2] == 2 ||
			grid[3][2] == 2 && grid[2][2] == 2 && grid[1][2] == 2 || grid[2][2] == 2 && grid[1][2] == 2 && grid[0][2] == 2)
		{
			pick = 3;
		}

		if (grid[5][3] == 2 && grid[4][3] == 2 && grid[3][3] == 2 || grid[4][3] == 2 && grid[3][3] == 2 && grid[2][3] == 2 ||
			grid[3][3] == 2 && grid[2][3] == 2 && grid[1][3] == 2 || grid[2][3] == 2 && grid[1][3] == 2 && grid[0][3] == 2)
		{
			pick = 4;
		}

		if (grid[5][4] == 2 && grid[4][4] == 2 && grid[3][4] == 2 || grid[4][4] == 2 && grid[3][4] == 2 && grid[2][4] == 2 ||
			grid[3][4] == 2 && grid[2][4] == 2 && grid[1][4] == 2 || grid[2][4] == 2 && grid[1][4] == 2 && grid[0][4] == 2)
		{
			pick = 5;
		}

		if (grid[5][5] == 2 && grid[4][5] == 2 && grid[3][5] == 2 || grid[4][5] == 2 && grid[3][5] == 2 && grid[2][5] == 2 ||
			grid[3][5] == 2 && grid[2][5] == 2 && grid[1][5] == 2 || grid[2][5] == 2 && grid[1][5] == 2 && grid[0][5] == 2)
		{
			pick = 6;
		}

		if (grid[5][6] == 2 && grid[4][6] == 2 && grid[3][6] == 2 || grid[4][6] == 2 && grid[3][6] == 2 && grid[2][6] == 2 ||
			grid[3][6] == 2 && grid[2][6] == 2 && grid[1][6] == 2 || grid[2][6] == 2 && grid[1][6] == 2 && grid[0][6] == 2)
		{
			pick = 7;
		}

		cout << "Computer Turn's  ";
		//pick = rand() % 7 + 1;
		cout << "Computer pick : " << pick << endl;
		cout << endl;
	}
	
	while (pick > 7 || pick < 1) {
		cout << "sry,it out of range." << endl;
		cout << "Again : ";
		cin >> pick;
	}

	while (grid[0][pick - 1] != 0)
	{
		cout << "FULL." << endl;
		if (player == 1)
		{
			cout << "Player : Please pick a square (1-7) again please." << endl;
			cin >> pick;
		}

		else
		{
			cout << "Computer pick again: " << endl;
			pick = rand() % 7 + 1;
			cout << pick << endl;
		}
	}

	for (int i = 6; i >= 0; i--) {
		if (grid[i][pick - 1] == 0) {
			grid[i][pick - 1] = player;
			break;
		}
	}

}

int checkwin(int grid[6][7] )
{
	for (int i = 0; i < 6; i++)
	{
		for (int j = 0; j < 7; j++)
		{
			if (grid[i][j] == 1 && grid[i + 1][j] == 1 && grid[i + 2][j] == 1 && grid[i + 3][j] == 1)
			{
				return 1;
			}
			if (grid[i][j] == 2 && grid[i + 1][j] == 2 && grid[i + 2][j] == 2 && grid[i + 3][j] == 2)
			{
				return 1;
			}
			if (grid[i][j] == 1 && grid[i][j + 1] == 1 && grid[i][j + 2] == 1 && grid[i][j + 3] == 1)
			{
				return 1;
			}
			if (grid[i][j] == 2 && grid[i][j + 1] == 2 && grid[i][j + 2] == 2 && grid[i][j + 3] == 2)
			{
				return 1;
			}
		}
	}
	for (int i = 6; i >= 0; i--)
	{
		for (int j = 0; j <= 6; j++)
		{
			if (grid[i][j] == 1 && grid[i - 1][j + 1] == 1 && grid[i - 2][j + 2] == 1 && grid[i - 3][j + 3] == 1)
			{
				return 1;
			}
			if (grid[i][j] == 2 && grid[i - 1][j + 1] == 2 && grid[i - 2][j + 2] == 2 && grid[i - 3][j + 3] == 2)
			{
				return 1;
			}
			if (grid[i][j] == 1 && grid[i - 1][j - 1] == 1 && grid[i - 2][j - 2] == 1 && grid[i - 3][j - 3] == 1)
			{
				return 1;
			}
			if (grid[i][j] == 2 && grid[i - 1][j - 1] == 2 && grid[i - 2][j - 2] == 1 && grid[i - 3][j - 3] == 2)
			{
				return 1;
			}
		}
	}

	/*for (int i = 0; i <= 6; i++)
	{
		for (int j = 0; j <= 6; j++)
		{
			if (grid[i][j] == 1 && grid[i + 1][j + 1] == 1 && grid[i + 2][j + 2] == 1 && grid[i + 3][j + 3] == 1)
			{
				return 1;
			}
			if (grid[i][j] == 2 && grid[i + 1][j + 1] == 2 && grid[i + 2][j + 2] == 1 && grid[i + 3][j + 3] == 2)
			{
				return 1;
			}
		}
	}*/
}

int main() {
	int grid[6][7];
	init(grid);
	int player = 1;
	while (checkwin(grid) != 1)
	{
		display(grid);
		turn(grid, player);
		if (player == 1)
		{
			player = 2;
		}

		else
		{
			player = 1;
		}
		if (checkwin(grid) == 1)
		{
			if (player == 1)
			{
				display(grid);
				cout << "Computer Win" << endl;
			}
			else
			{
				display(grid);
				cout << "Player Win" << endl;
			}
		}
	}

}
